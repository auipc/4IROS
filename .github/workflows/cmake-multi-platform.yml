# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest]
        c_compiler: [i686-elf-gcc]
        include:
          - os: ubuntu-latest
            c_compiler: i686-elf-gcc
            cpp_compiler: i686-elf-g++

    steps:
    - uses: actions/checkout@v3

    - name: Install i686-elf-gc
      run: |
        sudo apt install build-essential bison flex libgmp3-dev libmpc-dev libmpfr-dev texinfo
        export PREFIX="${{ github.workspace }}/opt/cross"
        export TARGET=i686-elf
        export PATH="$PREFIX/bin:$PATH"
        curl https://ftp.gnu.org/gnu/binutils/binutils-2.41.tar.gz --output binutils-2.41.tar.gz
        curl https://ftp.gnu.org/gnu/gcc/gcc-13.2.0/gcc-13.2.0.tar.gz --output gcc-13.2.0.tar.gz
        tar -xzf binutils-2.41.tar.gz
        tar -xzf gcc-13.2.0.tar.gz
        mkdir build-binutils
        cd build-binutils
        ../binutils-2.41/configure --target=$TARGET --prefix="$PREFIX" --with-sysroot --disable-nls --disable-werror
        make -j4
        make install
        cd ..
        mkdir build-gcc
        cd build-gcc
        ../gcc-13.2.0/configure --target=$TARGET --prefix="$PREFIX" --disable-nls --enable-languages=c,c++ --without-headers
        make all-gcc -j4
        make all-target-libgcc -j4
        make install-gcc
        make install-target-libgcc

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        export PREFIX="${{ github.workspace }}/opt/cross"
        export TARGET=i686-elf
        export PATH="$PREFIX/bin:$PATH"
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/toolchain.cmake -S ${{ github.workspace }}

    - name: Build
      run: >
        export PREFIX="${{ github.workspace }}/opt/cross"
        export TARGET=i686-elf
        export PATH="$PREFIX/bin:$PATH"
        cmake --build ${{ steps.strings.outputs.build-output-dir }}
